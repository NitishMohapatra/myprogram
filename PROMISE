FETCH DEMO
===========================================================================
<script>
  fetch("https://jsonplaceholder.typicode.com/comments")
    .then((response) => response.json())
    .then((data) => console.log(data));
</script>
============================================================================
Q.DEMO.HTML
==========================================================================
<script>
  function add(a, b) {
    return a + b;
  }
  let addRes = add(2, 3);
  console.log(addRes);

  let maxRes = Math.max(10, 20, 30);
  console.log(maxRes);


  let usersPromise = fetch('https://jsonplaceholder.typicode.com/users');
  console.log(usersPromise);

  usersPromise.then(function (response) {
    console.log(response);
  }, function (err) {
    console.log(err)
  });

</script>
===========================================================================
Q. DEMO1.HTML
==========================================================================
<html>
	<head>
		<script>
			var add = function (a,b){
				let result;
				result = a+b;
				return result;
			}
			let addResult = add(2,3);
			document.write("Addition is: "+ addResult); // 5
			document.write('<br/>')
			
			var sub = function(a, b) {
			  let result; 
			  setTimeout(()=>{result = a-b},3000); // 3sec
			  return result;
			}
			let subResult = sub(5,3);
			document.write("subtraction is: "+ subResult);
		</script>
	</head>
	<body>		
	</body>
</html>
===========================================================================
Q. DEMO 1_1.HTML
==========================================================================
<html>

<head>
	<script>
		var add = function (a, b) {
			let result;
			result = a + b;
			return result;
		}
		addResult = add(2, 3);
		console.log("Addition is: " + addResult);


		var sub = function (a, b) {
			let result;
			setTimeout(() => { result = a - b }, 3000);
			return result;
		}
		subResult = sub(5, 3);
		console.log("subtraction is: " + subResult);

		var mul = function (a, b) {
			let promiseObj = new Promise(function (resolve, reject) {
				setTimeout(() => {
					if (typeof a == 'number' && typeof b == 'number')
						resolve(a * b)
					else
						reject('wrong inputs')
				}, 3000);
			});
			return promiseObj;
		}
		// mul(3, 5).then(
		// 	res => console.log('multiplication is ' + res),
		// 	err => console.log('Error.......')
		// );
		async function PrintMulres(){
			let mulRes = await mul(3, 5);
			console.log(mulRes)
		}
		PrintMulres();
	</script>
</head>

<body>
</body>

</html>
===========================================================================
Q. DEMO1_2.HTML
==========================================================================
<script>
  function add(a, b) {
    let promiseObj = new Promise(function (resolve, reject) {
      setTimeout(() => {
        // resolve(a + b);
        reject('failed......')
      }, 3000);
    });
    return promiseObj;
  }
  let addPromise = add(2, 3);
  document.write(addPromise);

  addPromise.then(
    (response) => {
      document.write(response);
    },
    (err) => {
      document.write(err);
    }
  );
</script>

===========================================================================
Q. DEMO2.HTML
==========================================================================
<html>
  <body>
    <script>
      // promise Object created - Producer
      let carsPromise = new Promise(function (resolve, reject) {
        setTimeout(() => {
          //   resolve(["tata", "honda", "maruti"]);
          reject("something went wrong");
        }, 3000);
      });

      //get data from promise - Consumer
      carsPromise.then(
        (res) => {
          console.log(res);
        },
        (err) => {
          console.log(err);
        }
      );
    </script>
  </body>
</html>
===========================================================================
Q. DEMO2_1.HTML
==========================================================================
<html>
  <body>
    <script>
      // promise Object created - Producer
      let carsPromise = new Promise(function (resolve, reject) {
        setTimeout(() => {
          resolve(["tata", "honda", "maruti"]);
          //   reject("something went wrong");
        }, 3000);
      });

      //get data from promise - Consumer
      async function f1() {
        let cars = await carsPromise;
        console.log(cars);
      }
      f1();
    </script>
  </body>
</html>
===========================================================================
Q. DEMO3.HTML
==========================================================================
<html>
  <head>
    <script>
      var add = function (a, b) {
        let result;
        result = a + b;
        return result;
      };
      addResult = add(2, 3);
      alert("Addition is: " + addResult);

      var sub = function (a, b) {
        let result;
        setTimeout(() => {
          result = a - b;
        }, 3000);
        return result;
      };
      subResult = sub(5, 3);
      alert("subtraction is: " + subResult);

      var mul = function (a, b) {
        let promiseObj = new Promise(function (x, y) {
          setTimeout(() => {
            x(a * b);
          }, 3000);
        });
        return promiseObj;
      };
      res = mul(2, 3);
      console.log(res);

      promiseObj = mul(2, 3); //mul() doesnt return a value ,returns promise obj
      promiseObj.then(f1, f2);
      function f1(result) {
        alert("multiplication is " + result);
      }
      function f2(error) {
        alert(error);
      }
    </script>
  </head>
  <body></body>
</html>

===========================================================================
Q. DEMO4.HTML
==========================================================================
<html>
  <head>
    <script>
      var add = function (a, b) {
        let result;
        result = a + b;
        return result;
      };
      addResult = add(2, 3);
      alert("Addition is: " + addResult);

      var sub = function (a, b) {
        let result;
        setTimeout(() => {
          result = a - b;
        }, 3000);
        return result;
      };
      subResult = sub(5, 3);
      alert("subtraction is: " + subResult);

      var mul = function (a, b) {
        let promiseObj = new Promise(function (resolve, reject) {
          setTimeout(() => {
            resolve(a * b);
          }, 3000);
        });
        return promiseObj;
      };
      promiseobj = mul(5, 3);

      promiseobj.then(
        function (result) {
          alert(result);
        },
        function (error) {
          alert(error);
        }
      );
      res = mul(5, 3);
      console.log(res);
    </script>
  </head>
  <body></body>
</html>
===========================================================================
Q. ERROR HANDLING 1.HTML
==========================================================================
<html>
  <body>
    <script>
      let promiseObj = new Promise((resolve, reject) => {
        // setTimeout(resolve, 3000, "success data");
         setTimeout(reject, 3000, "error data");
      });
      promiseObj.then(
        (res)=>{console.log(res)},
        (err)=>{console.log(err)}
      )
    </script>
  </body>
</html>
===========================================================================
Q. ERROR HANDLING 2.HTML
==========================================================================
<html>
  <body>
    <script>
      let promiseObj = new Promise((resolve, reject) => {
        // setTimeout(resolve, 3000, "success data");
        setTimeout(reject, 3000, "error data");
      });
      promiseObj
        .then((res) => {
          console.log(res);
        })
        .catch((err) => {
          console.log(err);
        });
    </script>
  </body>
</html>
===========================================================================
Q. FETCH DEMO 1.HTML
==========================================================================
<html>
  <body>
    <script>
      let promiseObj = fetch("https://jsonplaceholde.typicode.com/comments");

      promiseObj.then((response) => {
        console.log(response);

        let promiseObj2 = response.json();

        promiseObj2.then((finalData) => {
          console.log(finalData);
        });

      }).catch(err=>{
        console.log('something went wrong!!!')
      });
    </script>
  </body>
</html>
===========================================================================
Q. FETCH DEMO 2.HTML
==========================================================================
<html>
  <body>
    <script>
      async function getData() {
        let data = await fetch("https://jsonplaceholder.typicode.com/comments");
        let finalData = await data.json();
        console.log(finalData);
      }
      getData();
    </script>
  </body>
</html>
===========================================================================
Q. PROMISE ALL
==========================================================================
<html>
  <head>
    <script>
        let promise1 = fetch('https://api.github.com/users/PulkitAgrawal08');
        let promise2 = fetch('https://api.github.com/users/sanjaysamantra1');
        let promise3 = fetch('https://api.github.com/user/iliakan');

        Promise.all([promise1,promise2,promise3]).then(([response1,response2,response3])=>{
            // console.log(response1,response2,response3);
            Promise.all([response1.json(),response2.json(),response3.json()]).then(([data1,data2,data3])=>{
               console.log(data1,data2,data3) 
            });
        },err=>{
          alert('went wrong')
        })
    </script>
  </head>
  <body></body>
</html>
===========================================================================
Q. PROMISE ALL 1.HTML
==========================================================================
<html>
  <head>
    <script>
      let promise1 = new Promise((resolve, reject) =>
        setTimeout(() => resolve("result-promise-1"), 2000)
      );
      let promise2 = new Promise((resolve, reject) =>
        setTimeout(() => resolve("result-promise-2"), 8000)
      );
      let promise3 = new Promise((resolve, reject) =>
        setTimeout(() => reject("error"), 4000)
      );

      Promise.all([promise1, promise2, promise3]).then(
        (res) => {
          alert("all promise resolved");
          console.log(res);
        },
        (err) => {
          console.log(err);
        }
      );
    </script>
  </head>
  <body></body>
</html>
===========================================================================
Q. PROMISE ALL 2.HTML
==========================================================================
<html>
  <head>
    <script>
      let urls = [
        "https://api.github.com/users/iliakan", // 2
        "https://api.github.com/users/PulkitAgrawal08", //1
        "https://api.github.com/users/sanjaysamantra1", //3
      ];

      // map every url to the promise of the fetch
      let requests = urls.map((url) => fetch(url));

      Promise.all(requests).then(responseArr=>{
          let convertToJson = responseArr.map(res=>res.json());

          Promise.all(convertToJson).then(finalDataArr=>{
            console.log(finalDataArr)
          })
      })
    </script>
  </head>
  <body>
</html>
===========================================================================
Q. ASYNC
==========================================================================
<html>
  <head>
    <script>
      function add(a, b) {
        return a + b;
      }
      addResult = add(2, 3);
      document.write(addResult);

      document.write("<br><hr>");
      //async returns a promise object
      async function sub(a, b) {
        return a - b;
      }
      subResult = sub(5, 3);
      document.write(subResult);
      document.write("<br><hr>");

      promiseObj = sub(5, 3);
      promiseObj.then(
        (res) => {
          document.write(res);
        },
        (err) => {
          document.write("error");
        }
      );
    </script>
  </head>
  <body></body>
</html>
===========================================================================
Q. ASYNC _AWAIT 1 .HTML
==========================================================================
<html>
  <body>
    <script>
      function getUsers() {
        let userPromise = fetch("https://jsonplaceholder.typicode.com/users");

        userPromise.then(
          (response) => {
            let finalPromise = response.json();
            finalPromise.then(
              (finaldata) => {
                console.log(finaldata);
              },
              (err) => {
                console.log(err);
              }
            );
          },
          (error) => {
            console.log(error);
          }
        );
      }
      getUsers();


      async function getComments(){
        let comments =  await fetch("https://jsonplaceholder.typicode.com/comments");
        let finalData = await comments.json();
        console.log(finalData)
      }
      getComments();

    </script>
  </body>
</html>
===========================================================================
Q.ASYNC_AWAIT 2.HTML
==========================================================================
<html>
  <head>
    <script>
      function who() {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve("sanjay");
          }, 1000);
        });
      }

      function what() {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve("teaches Javascript");
          }, 2000);
        });
      }

      function where() {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve("in class");
          }, 3000);
        });
      }
      
      who().then((res1) => { // promise hell
        console.log("promise-1 resolved", res1);

        what().then((res2) => {
          console.log("promise-2 resolved", res2);

          where().then((res3) => {
            console.log("promise-3 resolved", res3);

            console.log(res1, res2, res3);
          },function(err3){
            console.log(err3)
          });
        },function(err2){
          console.log(err2)
        });
      },function(err1){
        console.log(err1)
      });
    </script>
  </head>
  <body></body>
</html>
===========================================================================
Q. ASYNC _AWAIT 3. HTML
==========================================================================
<html>
	<head>
		<script>
			function who() {
			  return new Promise(resolve => {
				setTimeout(() => {
				  resolve('sanjay');
				}, 1000);
			  });
			}

			function what() {
			  return new Promise(resolve => {
				setTimeout(() => {
				  resolve('teaches Javascript');
				}, 2000);
			  });
			}

			function where() {
			  return new Promise(resolve => {
				setTimeout(() => {
				  resolve('in class');
				}, 3000);
			  });
			} 
			
			
			async function msg() {
			  const [a, b, c] = await Promise.all([who(), what(), where()]);

			  console.log(`${ a } ${ b } ${ c }`);
			}

			msg();
			
			/*Promise.all returns an array with the resolved 
			values once all the passed-in promises have resolved.*/
		</script>
	</head>
	<body>		
	</body>
</html>
===========================================================================
Q. ASYNC_AWAIT 4.HTML
===========================================================================
<html>
  <head>
    <script>
      // error handling using async await

      function f1() {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve([10, 20, 30]);
          }, 3000);
        });
      }
      function f2() {
        return new Promise((resolve, reject) => {
          setTimeout(() => {
            reject("rejected....");
          }, 3000);
        });
      }

      async function test() {
        let res1 = await f1();
        console.log(res1);
        try {
          let res2 = await f2();
          console.log(res2);
        } catch (err) {
          console.log(err); // TypeError: failed to fetch
        }
      }
      test();
    </script>
  </head>
  <body></body>
</html>
===============================================================================
