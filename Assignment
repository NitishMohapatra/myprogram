 Q.    Create Calculator By Using Javascript and CSS
-------------------------------------------------------------------------------------
<html>
	<head>
		<style>
			.bgcolornumber{
				background:#f1f1f1;
				color:#333;
				padding:10px;
			}
			td input{
				border: 1px solid #cccccc;
				width:80%;
				padding:10px;
				margin-top: 5px;
				font-size: 40px;
				outline:none;
				height:60px;
			}
			.input{
				width:500px;
				
			}
			#color{
					background:blue;
			}			
		</style>
	</head>
	<body>	
	<center>
		<h1>CALCULATOR</h1>
	
		<div id="calc" class="wow fadeInRight" >
	<form onsubmit="Javascript:cal(document.getElementById('valueshow').value);return false;">
		<table>
			<tbody>
				<tr>
					<td colspan="4"><input type="text" id="valueshow" value="0" class="input"></td>
				</tr>
				<tr>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="1"></td>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="2"></td>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="3"></td>
					<td><input class="bgoperationcolor" onclick="cals(this.value);" type="button" value="/" id="color"></td>
				</tr>
				<tr>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="4"></td>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="5"></td>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="6"></td>
					<td><input class="bgoperationcolor" onclick="cals('*');" type="button" value="*" id="color"></td>
				</tr>
				<tr>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="7"></td>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="8"></td>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="9"></td>
					<td><input class="bgoperationcolor" onclick="cals(this.value);" type="button" value="-" id="color"></td>
				</tr>
				<tr>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="0"></td>
					<td><input class="bgcolornumber" onclick="cals(this.value);" type="button" value="."></td>
					<td><input class="bgclear" onclick="cals(this.value);" type="button" value="C" style="background:red;"></td>
					<td><input class="bgoperationcolor" onclick="cals(this.value);" type="button" value="+" id="color"></td>
				</tr>
				<tr>
					<td colspan="4"><input class="equal" onclick="calculate(document.getElementById('valueshow').value);" type="button" value="="></td>	
				</tr>
			</tbody>
		</table>
	</form>	
	</div>
	
	<script>
		function cals(buttonValue){
			if(buttonValue=='C'){
				document.getElementById('valueshow').value='0'
			}
			else{
				if(document.getElementById('valueshow').value=='0')
				{document.getElementById('valueshow').value=buttonValue}
				else{document.getElementById('valueshow').value+=buttonValue}
			}
			}
	function calculate(equation){
		var answer = eval(equation);
		document.getElementById('valueshow').value=answer;
	}
	</script>
	</body>
</html>
------------------------------------------------------------------------------------------------------------------------------
Q.Fetch User Details From API <<<<<<
-----------------------------------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
  <h1>User List</h1>

  <div class="container">
    <div class="row">



    </div>
  </div>


  <script>
    fetch('https://jsonplaceholder.typicode.com/users')
      .then(response => response.json())
      .then(users => {

        let str = '';
        users.forEach(user => {
          str += `<div class="col">
              <div class="card" style="width:300px">
              <img class="card-img-top" src="https://www.w3schools.com/bootstrap5/img_avatar3.png" alt="Card image">
              <div class="card-body">`
          str += `<h4 class="card-title">${user.name}</h4>`
          str += `<p class="card-text">${user.email}</p>`
          str += `<a href="#" class="btn btn-primary">See Profile</a>`
          str += `</div>
              </div>
              </div>`

          document.querySelector('.row').innerHTML = str;
        })

      })
  </script>
</body>

</html>
-------------------------------------------------------------------------------------------------------------------------------------------
Q.  Create A stopWatch 
-----------------------------------------------------------------------------------------------------------------
</head>

<body>
  <h1 class="clock"></h1>
  <p>
    <button class="start">Start</button>
    <button class="pause">pause</button>
    <button class="reset">Reset</button>
  </p>
  <script>
    // Define a counter variable for the number of seconds and set it to zero.
    let secondCount = 0;
    // Define a global to store the interval when it is active.
    let pauseWatch;
    // Store a reference to the display paragraph in a variable
    const displayPara = document.querySelector('.clock');

    // Function to calculate the current hours, minutes, and seconds, and display the count
    function displayCount() {
      // Calculate current hours, minutes, and seconds
      let hours = Math.floor(secondCount / 3600);
      let minutes = Math.floor((secondCount % 3600) / 60);
      let seconds = Math.floor(secondCount % 60)

      // Display a leading zero if the values are less than ten
      let displayHours = (hours < 10) ? '0' + hours : hours;
      let displayMinutes = (minutes < 10) ? '0' + minutes : minutes;
      let displaySeconds = (seconds < 10) ? '0' + seconds : seconds;

      // Write the current pausewatch display time into the display paragraph
      displayPara.textContent = displayHours + ':' + displayMinutes + ':' + displaySeconds;

      // Increment the second counter by one
      secondCount++;
    }

    // Store references to the buttons in constants
    const startBtn = document.querySelector('.start');
    const pauseBtn = document.querySelector('.pause');
    const resetBtn = document.querySelector('.reset');

    // When the start button is pressed, start running displayCount() once per second using setInterval()
    startBtn.addEventListener('click', () => {
      pauseWatch = setInterval(displayCount, 1000);
      startBtn.disabled = true;
    });

    // When the pause button is pressed, clear the interval to pause the count.
    pauseBtn.addEventListener('click', () => {
      clearInterval(pauseWatch);
      startBtn.disabled = false;
    });

    // When the reset button is pressed, set the counter back to zero, then immediately update the display
    resetBtn.addEventListener('click', () => {
      clearInterval(pauseWatch);
      startBtn.disabled = false;
      secondCount = 0;
      displayCount();
    });

    // Run displayCount() once as soon as the page loads so the clock is displayed
    displayCount();
  </script>
</body>

</html>
